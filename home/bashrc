# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples


# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac
# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth
# append to the history file, don't overwrite it
shopt -s histappend
# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize


# My Prompt
RED="\[\033[01;31m\]"
GREEN="\[\033[01;32m\]"
BLUE="\[\033[01;34m\]"
DEFAULT="\[\033[00m\]"
PS1="$GREEN\u$BLUE@\h$RED:\w\$ $DEFAULT"


# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac


# enable color support of ls
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi


# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi


# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/plantex/Downloads/google-cloud-sdk/path.bash.inc' ]; then . '/home/plantex/Downloads/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/plantex/Downloads/google-cloud-sdk/completion.bash.inc' ]; then . '/home/plantex/Downloads/google-cloud-sdk/completion.bash.inc'; fi


# My functions
rem() {
    TEMPORARY_REMINA_FILE="/tmp/gcp.remmina"
    if [ $# -eq 2 ]
    then
        _HOSTNAME_OR_IP=$1
        _SLOT=$2
        cp ~/.local/share/remmina/gcp.template $TEMPORARY_REMINA_FILE
    else
        echo usage: rem [dc] hostname slot
        return 1
    fi
    sed -i "s/__HOSTNAME__/$_HOSTNAME_OR_IP/g" $TEMPORARY_REMINA_FILE
    sed -i "s/__SLOT__/$_SLOT/g" $TEMPORARY_REMINA_FILE
    remmina -c $TEMPORARY_REMINA_FILE
    sleep 0.5s
    rm $TEMPORARY_REMINA_FILE
}

getscreen() {
    if [ $# -gt 3 ]
    then
        echo 'getscreen [ [SERVER(sh-XXX-XX-XX-XXX)] SLOT] NBFrames'
        return
    fi
    FNIMES=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
    SERVER="$1"
    SLOT=$2
    FRAMES=${3:-5}

    for (( F = 0; F < $FRAMES; F++ )); do
        ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -AX -l blade ${SERVER} 'echo -en "screendump /tmp/screen-"'${FNIMES}-${F}'"\r" > `cat /tmp/vm.'${SLOT}'.pty` && read < `cat /tmp/vm.'${SLOT}'.pty`'
        sleep 1
    done
    scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r blade@${SERVER}:/tmp/screen-${FNIMES}-* /tmp/ >> /dev/null
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no blade@${SERVER} rm /tmp/screen-${FNIMES}-*
    ls /tmp/screen-$FNIMES-*
    feh /tmp/screen-$FNIMES-*
    rm -f /tmp/screen-$FNIMES-*
}

multi-ssh() {
    if [ $# -ne 2 ]
    then
        echo 'parallele-ssh SERVER.list "COMMAND"'
        return
    fi
    LIST=$1

    cat $LIST | while read server
    do
        ssh -l blade $server -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=2 "$2" < /dev/null 2>/dev/null
    done
}


# use vim as man pager
export MANPAGER="vim --not-a-term \
    -c 'set ft=man nomod nolist nonu nornu'\
    +AnsiEsc \
    -c 'map q :q<CR>' \
    -"


# My environments variables
. $HOME/.config/environment.d/*
